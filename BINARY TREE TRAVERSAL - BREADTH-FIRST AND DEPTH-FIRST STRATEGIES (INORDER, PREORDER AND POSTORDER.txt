
	Binary Tree Traversal - Breadth-First And Depth-First Strategies.

	Tree Traversal - process of visiting each node in the tree exactly once in some order.
	Visit - Reading/Processing data in a node.

	We can go either breadth-first or depth-first strategie.

					F - Root (level - 0)
				      /   \                              Breadth-First: we need to visit each node at the same level.
				    D       J  - level 1                 First we visit the root "F", then we go to "D" and "J".
				  /   \    /  \                          Then we will visit "B", "E", "G" and "K". 
				B      E  G     K - level 2              Then we will visit "A", "C" and "I" and at last we will go to "H"
 			       / \         \                             Order: "F, D, J, B, E, G, K, A, C, I, H"
			      A   C	    I - level 3              
					   /                         
					  H - level 4

						

		    
 			                                            
					F - Root (level - 0)
				      /   \                         Depth-First: If we choose a left child, then we have to visit every node in left subtree. 
				    D       J  - level 1                         If we choose a right child, then we have to visit every node in right subtree.
				  /   \    /  \                      
				B      E  G     K - level 2          
 			       / \         \                         
			      A   C	    I - level 3              
					   /                         
					  H - level 4

	There are 3 popular strategies for DEPTH-FIRST:
	<root> <left> <right> - Preorder
	<left> <root> <right> - Inorder
	<left> <right> <root> - Postorder

	Preorder (DLR)
                /  |  \
	    data  left  right


					F - Root (level - 0)   First we go to root "F", read it and then go to left child "D".
				      /   \                    In child "D" there is 2 ways - right and left, but because our method     
				    D       J  - level 1       is Preorder (DLR) we must go to the left child "B". There is also                  
				  /   \    /  \                the same situation as in child "D" so we go to the left child "A".      
				B      E  G     K - level 2    There is no left-child left, so we return to "B" and visit "C",      
 			       / \         \                   Then we return to "D" and visit "E", then we return to root "F"       
			      A   C	    I - level 3        and go to right child "J". Child "J" has 2 childs "G" and "K", but      
					   /                   because we are using Preorder (DLR) we will go to left child.      
					  H - level 4          Path would be: "F, D, B, A, C, E, J, G, I, H, K"


	Inorder (LDR)
	       /  |  \
	   left  data  right

					F - Root (level - 0)  In Inorder we just go left without reading a data of the node. For example,
				      /   \                   we went to "F" and didn't read his data, then we went to "D" and also didn't read      
				    D       J  - level 1      his data. Then we went to "B" and also didn't read his data and then we went to "A".                   
				  /   \    /  \               In "A" there is no left-child, so we READ his data and went to "C". "C" also       
				B      E  G     K - level 2   doesn't has a left-child so we read his data. Then we returned to "D" and read       
 			       / \         \                  his data and etc.       
			      A   C	    I - level 3       Path: "A, B, C, D, E, F, G, H, I, J, K"       
					   /                         
					  H - level 4	

	Postorder (LRD)
		 /  |  \
	      left right data
					F - Root (level - 0)
				      /   \                   In Postorder we check if a child has a left or right child and give the priorithet 
				    D       J  - level 1      to the left-child. For example, "F" has 2 childs (right and left), so we dont read                   
				  /   \    /  \               his data and go left to "D". "D" also has 2 childs R and L, so we dont read his data       
				B      E  G     K - level 2   and go to left-child "B". Then we go to "A". "A" doesnt have any childs so we read his data.        
 			       / \         \                  Then we return to "B". "B" still has a right child "C". We go to "C". "C" doesnt have any       
			      A   C	    I - level 3       childs so we read his data and etc.       
					   /                  Path will be: "A, C, B, E, D, H, I, G, K, J, F"       
					  H - level 4	

							Time complexity = O(n), Space complexity = O(h) worst (O(n), best/avg = O(log n)

CODE:

#include <iostream>
#include <cstdlib>
using namespace std;
// Binary Search Tree Node Declaration
struct node
{
    int info;
    struct node* left;
    struct node* right;
}*root;
// Class Declaration for Binary Search Tree
class BST
{
public:
    void find(int, node**, node**);
    void insert(node*, node*);
    void del(int);
    void case_a(node*, node*);
    void case_b(node*, node*);
    void case_c(node*, node*);
    void preorder(node*);
    void inorder(node*);
    void postorder(node*);
    void display(node*, int);
    BST()
    {
        root = NULL;
    }
};
// Main Contains Menu
int main()
{
    int choice, num;
    BST bst;
    node* temp;
    while (1)
    {
        // Main menu for Binary Search Tree Operations
        cout << "-----------------" << endl;
        cout << "Operations on BST" << endl;
        cout << "-----------------" << endl;
        cout << "1.Insert Element " << endl;
        cout << "2.Delete Element " << endl;
        cout << "3.Inorder Traversal" << endl;
        cout << "4.Preorder Traversal" << endl;
        cout << "5.Postorder Traversal" << endl;
        cout << "6.Display" << endl;
        cout << "7.Quit" << endl;
        cout << "Enter your choice : ";
        cin >> choice;
        switch (choice)
        {
        case 1:
            system("CLS");
            temp = new node;
            cout << "Enter the number to be inserted : ";
            cin >> temp->info;
            bst.insert(root, temp);
            break;
        case 2:
            system("CLS");
            if (root == NULL)
            {
                cout << "Tree is empty, nothing to delete" << endl;
                continue;
            }
            cout << "Enter the number to be deleted : ";
            cin >> num;
            bst.del(num);
            break;
        case 3:
            cout << "Inorder Traversal of BST:" << endl;
            bst.inorder(root);
            cout << endl;
            break;
        case 4:
            cout << "Preorder Traversal of BST:" << endl;
            bst.preorder(root);
            cout << endl;
            break;
        case 5:
            cout << "Postorder Traversal of BST:" << endl;
            bst.postorder(root);
            cout << endl;
            break;
        case 6:
            system("CLS");
            cout << "Display BST:" << endl;
            bst.display(root, 1);
            cout << endl;
            break;
        case 7:
            exit(1);
        default:
            cout << "Wrong choice" << endl;
        }
    }
}
// Find Element in the Binary Search Tree
void BST::find(int item, node** par, node** loc)
{
    node* ptr, * ptrsave;
    if (root == NULL)
    {
        *loc = NULL;
        *par = NULL;
        return;
    }
    if (item == root->info)
    {
        *loc = root;
        *par = NULL;
        return;
    }
    if (item < root->info)
        ptr = root->left;
    else
        ptr = root->right;
    ptrsave = root;
    while (ptr != NULL)
    {
        if (item == ptr->info)
        {
            *loc = ptr;
            *par = ptrsave;
            return;
        }
        ptrsave = ptr;
        if (item < ptr->info)
            ptr = ptr->left;
        else
            ptr = ptr->right;
    }
    *loc = NULL;
    *par = ptrsave;
}
// Inserting Element into the Binary Search Tree
void BST::insert(node* tree, node* newnode)
{
    if (root == NULL)
    {
        root = new node;
        root->info = newnode->info;
        root->left = NULL;
        root->right = NULL;
        cout << "Root Node is Added" << endl;
        return;
    }
    if (tree->info == newnode->info)
    {
        cout << "Element already in the tree" << endl;
        return;
    }
    if (tree->info > newnode->info)
    {
        if (tree->left != NULL)
        {
            insert(tree->left, newnode);
        }
        else
        {
            tree->left = newnode;
            (tree->left)->left = NULL;
            (tree->left)->right = NULL;
            cout << "Node Added To Left" << endl;
            return;
        }
    }
    else
    {
        if (tree->right != NULL)
        {
            insert(tree->right, newnode);
        }
        else
        {
            tree->right = newnode;
            (tree->right)->left = NULL;
            (tree->right)->right = NULL;
            cout << "Node Added To Right" << endl;
            return;
        }
    }
}
// Delete Element from the Binary Search tree
void BST::del(int item)
{
    node* parent, * location;
    if (root == NULL)
    {
        cout << "Tree empty" << endl;
        return;
    }
    find(item, &parent, &location);
    if (location == NULL)
    {
        cout << "Item not present in tree" << endl;
        return;
    }
    if (location->left == NULL && location->right == NULL)
        case_a(parent, location);
    if (location->left != NULL && location->right == NULL)
        case_b(parent, location);
    if (location->left == NULL && location->right != NULL)
        case_b(parent, location);
    if (location->left != NULL && location->right != NULL)
        case_c(parent, location);
    free(location);
}
// * Case A
void BST::case_a(node* par, node* loc)
{
    if (par == NULL)
    {
        root = NULL;
    }
    else
    {
        if (loc == par->left)
            par->left = NULL;
        else
            par->right = NULL;
    }
}
// * Case B
void BST::case_b(node* par, node* loc)
{
    node* child;
    if (loc->left != NULL)
        child = loc->left;
    else
        child = loc->right;
    if (par == NULL)
    {
        root = child;
    }
    else
    {
        if (loc == par->left)
            par->left = child;
        else
            par->right = child;
    }
}
// * Case C
void BST::case_c(node* par, node* loc)
{
    node* ptr, * ptrsave, * suc, * parsuc;
    ptrsave = loc;
    ptr = loc->right;
    while (ptr->left != NULL)
    {
        ptrsave = ptr;
        ptr = ptr->left;
    }
    suc = ptr;
    parsuc = ptrsave;
    if (suc->left == NULL && suc->right == NULL)
        case_a(parsuc, suc);
    else
        case_b(parsuc, suc);
    if (par == NULL)
    {
        root = suc;
    }
    else
    {
        if (loc == par->left)
            par->left = suc;
        else
            par->right = suc;
    }
    suc->left = loc->left;
    suc->right = loc->right;
}
// Pre Order Traversal
void BST::preorder(node* ptr)
{
    if (root == NULL)
    {
        cout << "Tree is empty" << endl;
        return;
    }
    if (ptr != NULL)
    {
        cout << ptr->info << "  ";
        preorder(ptr->left);
        preorder(ptr->right);
    }
}
// In Order Traversal
void BST::inorder(node* ptr)
{
    if (root == NULL)
    {
        cout << "Tree is empty" << endl;
        return;
    }
    if (ptr != NULL)
    {
        inorder(ptr->left);
        cout << ptr->info << "  ";
        inorder(ptr->right);
    }
}
// Postorder Traversal
void BST::postorder(node* ptr)
{
    if (root == NULL)
    {
        cout << "Tree is empty" << endl;
        return;
    }
    if (ptr != NULL)
    {
        postorder(ptr->left);
        postorder(ptr->right);
        cout << ptr->info << "  ";
    }
}
// Display Binary Search Tree Structure
void BST::display(node* ptr, int level)
{
    int i;
    if (ptr != NULL)
    {
        display(ptr->right, level + 1);
        cout << endl;
        if (ptr == root)
            cout << "Root->:  ";
        else
        {
            for (i = 0; i < level; i++)
                cout << "       ";
        }
        cout << ptr->info;
        display(ptr->left, level + 1);
    }
} //INSERT, DELETE, PREORDER, INORDER, POSTORDER BST

















