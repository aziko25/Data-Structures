
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;
};

class LinkedList {
private:
    Node* head;
public:
    LinkedList() {
        head = NULL;
    }

    //Add new element at the end of the list
    void push_back(int newElement) {
        Node* newNode = new Node();
        newNode->data = newElement;
        newNode->next = NULL;
        newNode->prev = NULL;
        if (head == NULL) {
            head = newNode;
        }
        else {
            Node* temp = head;
            while (temp->next != NULL)
                temp = temp->next;
            temp->next = newNode;
            newNode->prev = temp;
        }
    }

    //Inserts a new element at the given position 
    void push_at(int newElement, int position) {
        Node* newNode = new Node();
        newNode->data = newElement;
        newNode->next = NULL;
        newNode->prev = NULL;
        if (position < 1) {
            cout << "\nposition should be >= 1.";
        }
        else if (position == 1) {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
        else {
            Node* temp = head;
            for (int i = 1; i < position - 1; i++) {
                if (temp != NULL) {
                    temp = temp->next;
                }
            }
            if (temp != NULL) {
                newNode->next = temp->next;
                newNode->prev = temp;
                temp->next = newNode;
                if (newNode->next != NULL)
                    newNode->next->prev = newNode;
            }
            else {
                cout << "\nThe previous node is null.";
            }
        }
    }

    //reverse the list
    void reverseList() {
        if (head != NULL) {
            Node* prevNode = head;
            Node* tempNode = head;
            Node* curNode = head->next;

            prevNode->next = NULL;
            prevNode->prev = NULL;

            while (curNode != NULL) {
                tempNode = curNode->next;
                curNode->next = prevNode;
                prevNode->prev = curNode;
                prevNode = curNode;
                curNode = tempNode;
            }

            head = prevNode;
        }
    }

    //delete all nodes
    void deleteAllNodes() {
        Node* temp = new Node();
        while (head != NULL) {
            temp = head;
            head = head->next;
            free(temp);
        }
        cout << "All nodes are deleted successfully.\n";
    }

    //display the content of the list
    void PrintList() {
        Node* temp = head;
        if (temp != NULL) {
            cout << "The list contains: ";
            while (temp != NULL) {
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
        else {
            cout << "The list is empty.\n";
        }
    }
};

// test the code 
int main() {
    LinkedList MyList;

    //Add three elements in the list.
    MyList.push_back(10);
    MyList.push_back(20);
    MyList.push_back(30);
    MyList.PrintList();

    //Insert an element at position 3
    MyList.push_at(100, 3);
    MyList.PrintList();

    //Insert an element at position 2
    MyList.push_at(100, 2);
    MyList.PrintList();

    //Insert an element at position 1
    MyList.push_at(200, 1);
    MyList.PrintList();

    //Reversing the list.
    MyList.reverseList();
    MyList.PrintList();

    //delete all nodes of the list
    MyList.deleteAllNodes();
    MyList.PrintList();

    cout << "\n\n\n\n";
    system("pause");
    return 0;
}