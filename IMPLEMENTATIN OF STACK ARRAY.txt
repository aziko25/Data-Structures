
	We can implement stacks using:
	a) Arrays
	b) Linked Lists

	Array Implementation:
	
	int A[10] 
	___________________
	|_|_|_|_|_|_|_|_|_|
	 1 2 3 4 5 6 7 8 9

	top <- -1 //empty stack
	Push (x) { 
	 top <- top + 1
	 A[top] <- x
	} 
	Pop() { 
	 top <- top -1
	}
	Top() { 
	 return A[top]
	}
	IsEmpty() { 
	 if (top == -1) 
	  return true
	 else
	  return false
	}
	
	Push (2)
       ____________________
       |2|_|_|_|_|_|_|_|_|_|
	0 1 2 3 4 5 6 7 8 9

	Push (10)

       _____________________
       |2|10|_|_|_|_|_|_|_|_|
	0  1 2 3 4 5 6 7 8 9
	
	Push (5)
	
	_____________________
       |2|10|5|_|_|_|_|_|_|_|
	0  1 2 3 4 5 6 7 8 9

	Pop()
	Push (7)
	
	     top
       ______|_______________
       |2|10|7|_|_|_|_|_|_|_|
	0  1 2 3 4 5 6 7 8 9

	In case if there is overflow, we need to create a new large array. Cost - O(n)

	Code:

	#include <iostream>
	using namespace std;
	struct Node {
 	   int data;
	    struct Node* next;
	};
	struct Node* top = NULL;
	void push(int val) {
	    struct Node* newnode = (struct Node*)malloc(sizeof(struct Node));
 	   newnode->data = val;
 	   newnode->next = top;
 	   top = newnode;
	}
	
	void pop() {
	    if (top == NULL)
	        cout << "Stack Underflow" << endl;
 	   else {
	        cout << "The popped element is " << top->data << endl;
 	       top = top->next;
	    }
	}

	void display() {
  	  struct Node* ptr;
 	   if (top == NULL)
   	     cout << "stack is empty";
   	 else {
   	     ptr = top;
   	     cout << "Stack elements are: ";
   	     while (ptr != NULL) {
   	         cout << ptr->data << " ";
   	         ptr = ptr->next;
  	      }
	    }
	    cout << endl;
	}
	int main() {
	    int ch, val;
	    cout << "1) Push in stack" << endl;
	    cout << "2) Pop from stack" << endl;
	    cout << "3) Display stack" << endl;
	    cout << "4) Exit" << endl;
	    do {
	        cout << "Enter choice: " << endl;
	        cin >> ch;
	        switch (ch) {
	        case 1: {
           	 cout << "Enter value to be pushed:" << endl;
         	   cin >> val;
       	     push(val);
    	        break;
       	 }
      	  case 2: {
     	       pop();
     	       break;
  	      }
   	     case 3: {
  	          display();
 	           break;
	        }
	        case 4: {
   	         cout << "Exit";
  	          break;
  	      }
    	    default: {
   	         cout << "Invalid Choice" << endl;
   	     }
  	      }
 	   } while (ch != 4);
	    return 0;
	}






